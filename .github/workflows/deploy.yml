name: Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.detect.outputs.services }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # ✅ ensure full history

      - name: Detect changed services
        id: detect
        run: |
          # Find changed files (fallback to all files if first commit)
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
            echo "⚠️ First commit detected, using all files"
            CHANGED_FILES=$(git ls-files)
          fi

          echo "Changed files: $CHANGED_FILES"

          SERVICES=""
          for path in $CHANGED_FILES; do
            if [[ $path == src/*/* ]]; then
              SERVICE=$(echo "$path" | cut -d'/' -f2)
              SERVICES="$SERVICES $SERVICE"
            fi
          done

          UNIQUE_SERVICES=$(echo "$SERVICES" | xargs -n1 | sort -u | xargs)
          echo "Detected services: $UNIQUE_SERVICES"

          # Convert to JSON array
          if [[ -n "$UNIQUE_SERVICES" ]]; then
            JSON_SERVICES=$(printf '%s\n' $UNIQUE_SERVICES | jq -R . | jq -s .)
          else
            JSON_SERVICES="[]"
          fi

          echo "services=$JSON_SERVICES" >> $GITHUB_OUTPUT

  build-and-push:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.services != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
          | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Ensure ECR repo exists
        if: matrix.service != 'app'
        run: |
          REPO_NAME="retail-store/${{ matrix.service }}"
          aws ecr describe-repositories --repository-names "$REPO_NAME" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "$REPO_NAME"

      - name: Build and Push Docker image
        if: matrix.service != 'app'
        run: |
          IMAGE_TAG=${{ github.sha }}
          IMAGE=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/retail-store/${{ matrix.service }}:$IMAGE_TAG

          echo "🚀 Building and pushing $IMAGE"
          docker build -t $IMAGE ./src/${{ matrix.service }}
          docker push $IMAGE

  update-helm:
    needs: [detect-changes, build-and-push]
    if: ${{ needs.detect-changes.outputs.services != '[]' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Update Helm values
        run: |
          IMAGE_TAG=${{ github.sha }}
          for service in $(echo '${{ needs.detect-changes.outputs.services }}' | jq -r '.[]'); do
            VALUES_FILE="src/$service/chart/values.yaml"
            if [[ -f "$VALUES_FILE" ]]; then
              echo "🔧 Updating $VALUES_FILE with tag $IMAGE_TAG"
              yq -i ".image.tag = \"$IMAGE_TAG\"" "$VALUES_FILE"
            fi
          done

      - name: Commit changes to gitops branch
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          git checkout -B gitops
          git add src/*/chart/values.yaml
          git commit -m "chore: update Helm values for ${{ needs.detect-changes.outputs.services }} with tag ${{ github.sha }}" || echo "No changes to commit"
          git push origin gitops --force

  notification:
    needs: [detect-changes, build-and-push, update-helm]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify
        run: |
          echo "🟢 Services detected: ${{ needs.detect-changes.outputs.services }}"
          echo "✅ Workflow finished!"
